{"version":3,"sources":["components/landingpage.js","components/about.js","components/projects.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","style","width","margin","className","col","src","alt","Component","About","Projects","Main","exact","path","component","App","fixedHeader","title","textDecoration","color","to","scroll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMA+BeA,E,uKA1BP,OACI,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAO,SAC/B,kBAAC,OAAD,CAAMC,UAAU,gBACZ,kBAAC,OAAD,CAAMC,IAAK,IACP,yBACAC,IAAI,0GACJC,IAAI,SACJH,UAAU,eAEV,yBAAKA,UAAU,eACX,yDACA,6BACA,sF,GAdFI,aCSXC,E,uKARP,OACI,6BACI,+C,GAJID,aCULE,E,uKARP,OACI,6BACI,kD,GAJOF,aCeRG,EAVF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,SAASC,UAAWL,IACtC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,YAAYC,UAAWJ,M,QC0BlCK,MA9Bf,WACE,OACE,6BACA,kBAAC,SAAD,CAAQC,aAAW,GACf,kBAAC,SAAD,CAAQZ,UAAU,eAAea,MAAO,kBAAC,IAAD,CAAMhB,MAAO,CAACiB,eAAgB,OAAQC,MAAO,SAAUC,GAAG,KAA1D,oBAAuFC,QAAM,GACjI,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMD,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAYR,kBAAC,UAAD,KACI,yBAAKhB,UAAU,iBACf,kBAAC,EAAD,UClBQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAIFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e4c4c328.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Grid, Cell } from 'react-mdl';\n\nclass LandingPage extends Component {\n    render() {\n        return(\n            <div style={{width: '100%', margin:'auto'}}>\n                <Grid className='landing-grid'>\n                    <Cell col={12}>\n                        <img \n                        src='https://cdn3.iconfinder.com/data/icons/social-messaging-productivity-6/128/profile-male-circle2-512.png'\n                        alt='avatar'\n                        className='avatar-img'\n                        />\n                        <div className='banner-text'>\n                            <h1>Full Stack Web Developer </h1>\n                            <hr/>\n                            <p> Python | Django | Javascript | React | Nodejs </p>\n                            \n\n                        </div>\n                    </Cell>\n\n                </Grid>\n\n\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react'\n\nclass About extends Component {\n    render() {\n        return(\n            <div>\n                <h1>About Page</h1>\n            </div>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react'\n\nclass Projects extends Component {\n    render() {\n        return(\n            <div>\n                <h1>Projects Page</h1>\n            </div>\n        )\n    }\n}\n\nexport default Projects;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport LandingPage from './landingpage'\nimport About from './about';\nimport Projects from './projects';\n\n\nconst Main = () => (\n    <Switch>\n        <Route exact path='/' component={LandingPage}/>\n        <Route exact path='/about' component={About}/>\n        <Route exact path='/projects' component={Projects}/>\n\n\n    </Switch>\n)\n\nexport default Main;\n\n\n","import React from 'react';\nimport './App.css';\nimport { Layout, Navigation, Header, Drawer, Content } from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <div>\n    <Layout fixedHeader>\n        <Header className=\"header-color\" title={<Link style={{textDecoration: 'none', color: 'white'}} to=\"/\">Julius-   Mbugua</Link>} scroll>\n            <Navigation>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/projects\">Portfolio</Link>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Header>\n        {/* <Drawer title={<Link style={{textDecoration: 'none', color: 'black'}} to=\"/\">MyPortfolio</Link>}>\n            <Navigation>\n            <Link to=\"/about\">About</Link>\n                <Link to=\"/projects\">Portfolio</Link>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n        </Drawer> */}\n\n        <Content>\n            <div className='page-content'/>\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.to);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter> \n    <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}